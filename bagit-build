#!/usr/bin/env perl

use strict;
use DateTime;
use Digest::MD5 qw(md5_hex);
use Digest::SHA qw(sha256_hex);
use File::Basename;
use File::Copy;
use File::Find;
use File::Path qw(remove_tree);

my (
    $src,
) = @ARGV;

if (! -d $src) {
    print "File $src does not exist or is not a directory, not building bag\n";
    exit;
}

# dot_clean
print "Running dot_clean on $src\n";
system("/usr/sbin/dot_clean", $src);

if (-f "$src/bagit.txt") {
    print "Directory $src already has bagit.txt, not building bag\n";

    # check for manifested resource forks
    my $mft_md5 = "$src/manifest-md5.txt";
    my $mft_sha256 = "$src/manifest-sha256.txt";

    my $tmp_mft_md5 = "$src/tmp.manifest-md5.txt";
    my $tmp_mft_sha256 = "$src/tmp.manifest-sha256.txt";

    my $changed_any = 0;
    my $changed;

    if (-f $mft_md5) {
        $changed = 0;
        open my $in_fh, '<', $mft_md5
            or die "Can't read from $mft_md5: $!\n";
        open my $out_fh, '>', $tmp_mft_md5
            or die "Can't write to $tmp_mft_md5: $!\n";
        while (<$in_fh>) {
            if (m#/\._#) {
                $changed = 1;
            } else {
                print $out_fh $_;
            }
        }
        close($in_fh);
        close($out_fh);

        if ($changed) {
            print "md5 checksum manifest changed\n";
            $changed_any = 1;
            rename $tmp_mft_md5, $mft_md5;
        } else {
            unlink $tmp_mft_md5;
        }
    }

    if (-f $mft_sha256) {
        $changed = 0;
        open my $in_fh, '<', $mft_sha256
            or die "Can't read from $mft_sha256: $!\n";
        open my $out_fh, '>', $tmp_mft_sha256
            or die "Can't write to $tmp_mft_sha256: $!\n";
        while (<$in_fh>) {
            if (m#/\._#) {
                $changed = 1;
            } else {
                print $out_fh $_;
            }
        }
        close($in_fh);
        close($out_fh);

        if ($changed) {
            print "sha256 checksum manifest changed\n";
            $changed_any = 1;
            rename $tmp_mft_sha256, $mft_sha256;
        } else {
            unlink $tmp_mft_sha256;
        }
    }

    if ($changed_any) {
        # rebuild tag manifests
        my @bagfiles = (
            'bag-info.txt',
            'bagit.txt',
            'manifest-md5.txt',
            'manifest-sha256.txt',
        );
        my $tagmanifest_md5 = "$src/tagmanifest-md5.txt";
        my $tagmanifest_sha256 = "$src/tagmanifest-sha256.txt";
        open my $tmfh, '>', $tagmanifest_md5
            or die "Can't write to $tagmanifest_md5: $!\n";
        open my $tsfh, '>', $tagmanifest_sha256
            or die "Can't write to $tagmanifest_sha256: $!\n";

        foreach my $bagfile (@bagfiles) {
            next unless -f $bagfile;

            my $md5 = do {
                open my $mfh, '<:raw', "$src/$bagfile";
                my $sum = Digest::MD5->new;
                local $/ = \65536;
                while (<$mfh>) {
                    $sum->add($_);
                }
                $sum->hexdigest;
            };

            my $sha256 = do {
                open my $mfh, '<:raw', "$src/$bagfile";
                my $sum = Digest::SHA->new('sha256');
                local $/ = \65536;
                while (<$mfh>) {
                    $sum->add($_);
                }
                $sum->hexdigest;
            };
            print $tmfh "$md5  $bagfile\n";
            print $tsfh "$sha256  $bagfile\n";
        }
    }

    exit;
}

# Mark intent
my $intent = "$src.intent";
if (-f "$intent") {
    print "[ERROR] Please report this: intent already exists for $src\n";
    exit;
}
open my $fh, '>', $intent
    or die "Can't write to $intent: $!\n";
close($fh);

# Create bag directory
my $tgt = "$src.bag";
print "ok, bagging $tgt from $src\n";
mkdir $tgt;
mkdir "$tgt/data";

# Set basic metadata
my $lc_bag_id = basename($src);
my $lc_project = $lc_bag_id;
$lc_project =~ s/[^A-Za-z0-9].*//;

# Populate top-level files

my $bagit = "$tgt/bagit.txt";
open my $fh, '>', $bagit
    or die "Can't write to $bagit: $!\n";

print $fh <<"BAGITTXT";
BagIt-Version: 0.97
Tag-File-Character-Encoding: UTF-8
BAGITTXT
close($fh);

my $baginfo = "$tgt/bag-info.txt";
my $now = DateTime->now()->iso8601() . 'Z';
open my $fh, '>', $baginfo
    or die "Can't write to $baginfo: $!\n";

print $fh <<"BAGINFOTXT";
Bagging-Date: $now
Bag-Software-Agent: build-bag.pl (Perl script)
LC-Bag-Id: $lc_bag_id
LC-Project: $lc_project
LCCN-Permalink: https://lccn.loc.gov/2013655443
BAGINFOTXT
close($fh);

# Create manifests

my $manifest_md5 = "$tgt/manifest-md5.txt";
my $manifest_sha256 = "$tgt/manifest-sha256.txt";
my $mmfh;
my $msfh;
open $mmfh, '>', $manifest_md5
    or die "Can't write to $manifest_md5: $!\n";
open $msfh, '>', $manifest_sha256
    or die "Can't write to $manifest_sha256: $!\n";

find(\&checksum, $src);
close($mmfh);
close($msfh);

# Create tagmanifests

my @bagfiles = (
    'bag-info.txt',
    'bagit.txt',
    'manifest-md5.txt',
    'manifest-sha256.txt',
);
my $tagmanifest_md5 = "$tgt/tagmanifest-md5.txt";
my $tagmanifest_sha256 = "$tgt/tagmanifest-sha256.txt";
open my $tmfh, '>', $tagmanifest_md5
    or die "Can't write to $tagmanifest_md5: $!\n";
open my $tsfh, '>', $tagmanifest_sha256
    or die "Can't write to $tagmanifest_sha256: $!\n";

foreach my $bagfile (@bagfiles) {
    my $md5 = do {
        open my $mfh, '<:raw', "$tgt/$bagfile";
        my $sum = Digest::MD5->new;
        local $/ = \65536;
        while (<$mfh>) {
            $sum->add($_);
        }
        $sum->hexdigest;
    };

    my $sha256 = do {
        open my $mfh, '<:raw', "$tgt/$bagfile";
        my $sum = Digest::SHA->new('sha256');
        local $/ = \65536;
        while (<$mfh>) {
            $sum->add($_);
        }
        $sum->hexdigest;
    };
    print $tmfh "$md5  $bagfile\n";
    print $tsfh "$sha256  $bagfile\n";
}

# Move files

find({
    wanted => \&move_files,
    no_chdir => 1,
}, $src);

# Cleanup
print "ok, cleaning up after bagging $src\n";
rename $src, "$src.tbd";
rename $tgt, $src;
remove_tree("$src.tbd", {safe => 1});
unlink $intent;

##### END #####

sub move_files {
    my $file = $_;
    my $basename = basename($file);
    return if $basename =~ /^\./;
    return unless -f $file;

    my $path;
    ($path = $file) =~ s#$src/##;
    my $dir = dirname($path);

    my $destdir;
    if ($dir ne '.') {
        $destdir = "$tgt/data/$dir";
        if (! -e $destdir) {
            if (! mkdir $destdir) {
                print "Can't mkdir $destdir: $!\n";
                return;
            }
        }
    } else {
        $destdir = "$tgt/data";
    }

    print "move $file, $destdir\n";
    move $file, $destdir;
}

sub checksum {
    return if /^\./;
    return unless -f;

    my $basic = $_;
    my $full = $File::Find::name;
    my $file;
    ($file = $full) =~ s#^$src/##;

    # Get checksums
    my $md5 = do {
        open my $mfh, '<:raw', $basic;
        my $sum = Digest::MD5->new;
        local $/ = \65536;
        while (<$mfh>) {
            $sum->add($_);
        }
        $sum->hexdigest;
    };

    my $sha256 = do {
        open my $mfh, '<:raw', $basic;
        my $sum = Digest::SHA->new('sha256');
        local $/ = \65536;
        while (<$mfh>) {
            $sum->add($_);
        }
        $sum->hexdigest;
    };
    
    print $mmfh "$md5  data/$file\n";
    print $msfh "$sha256  data/$file\n";
}

#!/usr/bin/env perl

use strict;
use DateTime;
use Digest::MD5 qw(md5_hex);
use Digest::SHA qw(sha256_hex);
use File::Basename;
use File::Copy;
use File::Find;
use File::Path qw(remove_tree);

my (
    $src,
) = @ARGV;

if (! -d $src) {
    exit;
}

if (! -f "$src/bagit.txt") {
    print "not ok $src (missing bagit.txt)\n";
}

# Identify payload files
my @files_found = ();
find({
    wanted => \&payload_files,
    no_chdir => 1,
}, "$src/data");

# Check fixity, recording files encountered
my %seen;
my @algs = ('md5', 'sha256');
my $alg;
my $mft;
my $got_sum;

foreach $alg (@algs) {
    $mft = "$src/manifest-$alg.txt";
    if (-f $mft) {
        %seen = ();
        open my $fh, '<', $mft
            or die "$0: can't read $mft: $!\n";
        while (<$fh>) {
            chomp;
            my ($expected_sum, $file) = split(/\s+/, $_);
            $seen{$file} = 1;

            $got_sum = do {
                open my $mfh, '<:raw', "$src/$file"
                    or die "Can't read $src/$file: $!\n";
                my $sum;
                if ($alg eq 'md5') {
                    $sum = Digest::MD5->new;
                } elsif ($alg eq 'sha256') {
                    $sum = Digest::SHA->new('sha256');
                }
                local $/ = \65536;
                while (<$mfh>) {
                    $sum->add($_);
                }
                $sum->hexdigest;
            };

            if ($expected_sum ne $got_sum) {
                print "not ok $src (file $file has $alg checksum $got_sum, expected $expected_sum instead)\n";
                exit;
            }
        }
        foreach my $file (@files_found) {
            if (!$seen{$file}) {
                print "not ok $src (file $file is not manifested in $mft\n";
                exit;
            }
        }
    }
}

# tag manifests
foreach $alg (@algs) {
    $mft = "$src/tagmanifest-$alg.txt";
    if (-f $mft) {
        open my $fh, '<', $mft
            or die "$0: can't read $mft: $!\n";
        while (<$fh>) {
            chomp;
            my ($expected_sum, $file) = split(/\s+/, $_);

            $got_sum = do {
                open my $mfh, '<:raw', "$src/$file"
                    or die "Can't read $src/$file: $!\n";
                my $sum;
                if ($alg eq 'md5') {
                    $sum = Digest::MD5->new;
                } elsif ($alg eq 'sha256') {
                    $sum = Digest::SHA->new('sha256');
                }
                local $/ = \65536;
                while (<$mfh>) {
                    $sum->add($_);
                }
                $sum->hexdigest;
            };

            if ($expected_sum ne $got_sum) {
                print "not ok $src (file $file has $alg checksum $got_sum, expected $expected_sum instead)\n";
                exit;
            }
        }
    }
}

print "ok $src\n";

##### END #####

sub payload_files {
    my $file = $_;
    my $basename = basename($file);
    return if $basename =~ /^\./;
    return unless -f $file;

    my $path;
    ($path = $file) =~ s#$src/##;

    push @files_found, $path;
}
